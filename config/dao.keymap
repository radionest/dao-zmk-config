/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3
#define LR_NUM 4
#define LR_DEL 5
#define LR_NAV 6

&lt {
    quick_tap_ms = <200>;
    flavor = "balanced";
};

&mt {
};

&sl {
    ignore-modifiers;
    release-after-ms = <3000>;
};

/ {
    macros {
        delete_end_line: delete_end_line {
            label = "delete_end_line";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(END) &kp DEL>;
        };

        delete_begin_line: delete_begin_line {
            label = "delete_begin_line";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LS(HOME) &kp DEL>;
        };

        lang_shift: lang_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LSHIFT) &tog 1>;
            label = "LANG_SHIFT";
        };

        lang_eng: lang_eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LSHIFT) &to 1>;
            label = "LANG_ENG";
        };

        lang_rus: lang_rus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LSHIFT) &to 0>;
            label = "LANG_RUS";
        };

        goto_symbol_layer_changelang: goto_symbol_layer_changelang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 0>,
                <&macro_tap_time 0>,
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT)>,
                <&macro_press>,
                <&mo 2>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT)>;

            label = "GOTO_SYMBOL_LAYER_CHANGELANG";
            tap-ms = <1>;
            wait-ms = <1>;
        };

        tog_lang: tog_lang {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT) &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&kp LA(LEFT_SHIFT)>;

            label = "TOG_LANG";
            tap-ms = <1>;
            wait-ms = <1>;
        };

        kp_nbsp: kp_nbsp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_NUMBER_1 &kp KP_NUMBER_6 &kp KP_NUMBER_0>,
                <&macro_release>,
                <&kp LALT>;

            label = "KP_NBSP";
        };

        sl_w_modifier: new_macro {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "NEW_MACRO";
        };
    };
};

/ {
    behaviors {
        alttab_back_or_v: alt_tab_backward {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_TAB_V";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp LS(TAB)>;

            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        alttab_forward_or_r: alt_tab_forward {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_TAB_R";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp TAB>;

            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        ALT: alt_for_alttab {
            compatible = "zmk,behavior-hold-tap";
            label = "ALTTAB";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            retro-tap;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <17 42>;
        };

        shift_grave_esc: shift_grave_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_GRAVE_ESC";
            bindings = <&kp ESC>, <&kp LS(GRAVE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        SYM_LAYER_or_tap: SYM_LAYER_or_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SYM_LAYER_OR_TAP";
            bindings = <&goto_symbol_layer_changelang>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
        };

        homerow_right: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <12 26 13 0 1 14 27 39 38 40 28 15 2 3 29 16 41 42 30 17 4 5 18 43 31 51 50 52>;
            flavor = "tap-preferred";
            retro-tap;
            tapping-term-ms = <200>;
        };

        hold_pref_ht: hold_pref_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREF_HT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };

        GAME_BAR_REVERSE: GAME_BAR_REVERSE {
            compatible = "zmk,behavior-mod-morph";
            label = "GAME_BAR_REVERSE";
            bindings = <&trans>, <&mo 9>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_navigatio {
            timeout-ms = <70>;
            key-positions = <51 43>;
            bindings = <&mo 5>;
        };

        combo_collapse {
            timeout-ms = <50>;
            key-positions = <30 42>;
            bindings = <&kp LG(M)>;
        };

        combo_printscreen {
            timeout-ms = <50>;
            key-positions = <30 17>;
            bindings = <&kp RG(RS(S))>;
        };

        combo_ctl_enter {
            timeout-ms = <30>;
            key-positions = <31 18>;
            bindings = <&kp LC(RET)>;
        };

        goto_default_layer {
            bindings = <&to 0>;
            key-positions = <12 25>;
            timeout-ms = <200>;
            layers = <1>;
        };

        ctrl_shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <51 50>;
            timeout-ms = <100>;
        };

        go_to_eng_layer {
            bindings = <&to 1>;
            key-positions = <12 25>;
            timeout-ms = <200>;
            layers = <0>;
        };

        TOGGLE_GAME_MOD {
            bindings = <&tog 7>;
            key-positions = <5 4 3 2>;
            timeout-ms = <200>;
        };

        go_to_reverse {
            bindings = <&mo 9>;
            key-positions = <51 43>;
            timeout-ms = <200>;
            layers = <7>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
          &kp F12           &kp F1   &kp F2  &kp F3       &kp F4                &kp F5                           &kp F6          &kp F7                        &kp F8                      &kp F9                      &kp F10    &kp F11
&kp LWIN  &kp TAB           &kp Q    &kp W   &kp E        &alttab_forward_or_r  &kp T                            &kp Y           &kp U                         &kp I                       &kp O                       &kp P      &kp LBKT       &mt RWIN RBKT
          &shift_grave_esc  &lt 3 A  &kp S   &ALT LALT D  &kp F                 &kp G                            &kp H           &homerow_right RIGHT_SHIFT J  &homerow_right RIGHT_ALT K  &homerow_right RIGHT_GUI L  &kp SEMI   &mt RCTRL SQT
          &kp LALT          &kp Z    &kp X   &kp C        &alttab_back_or_v     &kp B                            &kp N           &kp M                         &kp COMMA                   &kp DOT                     &kp GRAVE  &lang_eng
                                             &sk LSHFT    &mt LCTRL RET         &SYM_LAYER_or_tap 0 BACKSPACE    &lt 4 LS(FSLH)  &lt 5 SPACE                   &lt 5 FSLH
            >;
        };

        ENG_layer {
            bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans        &trans       &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans       &trans  &trans     &trans  &trans  &trans     &trans
        &trans  &trans  &trans  &trans  &trans  &trans        &trans       &trans  &trans     &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans        &trans       &trans  &trans     &trans  &trans  &lang_rus
                                &trans  &trans  &lt 2 BSPC    &lt 4 COMMA  &trans  &lt 5 DOT
            >;
        };

        symbols_eng_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
           &kp F11        &kp F6     &kp F7        &kp F8          &kp F9     &kp F10            &trans     &trans             &trans            &trans            &trans             &trans
&kp TILDE  &kp PIPE       &kp F1     &tog_lang AT  &tog_lang HASH  &kp DLLR   &tog_lang GRAVE    &kp CARET  &kp QUESTION       &kp AMPERSAND     &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp LA(LSHFT)  &kp_nbsp
           &kp GRAVE      &kp EXCL   &kp AT        &kp HASH        &kp SEMI   &kp PRCNT          &kp COLON  &kp RIGHT_BRACKET  &kp LEFT_BRACKET  &kp RPAR          &kp LPAR           &trans
           &kp BACKSLASH  &kp SLASH  &kp ASTERISK  &kp MINUS       &kp EQUAL  &kp PLUS           &kp UNDER  &kp RIGHT_BRACE    &kp LEFT_BRACE    &kp GREATER_THAN  &kp LESS_THAN      &trans
                                                   &mo 6           &trans     &trans             &trans     &trans             &lt 6 DEL
            >;
        };

        num_layer {
            bindings = <
       &none  &none   &none            &none            &none            &none                     &none   &none   &none   &none   &none   &none
&none  &none  &none   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp SLASH                 &none   &none   &none   &trans  &trans  &trans  &none
       &none  &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_NUMBER_0           &none   &none   &none   &none   &none   &none
       &none  &none   &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMLOCK            &none   &none   &none   &none   &none   &none
                                       &trans           &trans           &mt LEFT_ALT BACKSPACE    &trans  &trans  &trans
            >;
        };

        del_layer {
            bindings = <
       &none  &none  &none  &none   &none  &none     &none   &none               &none         &none       &none             &none
&none  &none  &none  &none  &none   &none  &none     &none   &delete_begin_line  &none         &none       &delete_end_line  &none  &none
       &none  &none  &none  &none   &none  &none     &none   &kp BSPC            &kp DOWN      &kp UP      &kp DEL           &none
       &none  &none  &none  &none   &none  &none     &none   &kp LC(BSPC)        &kp LC(DOWN)  &kp LC(UP)  &kp LC(DEL)       &none
                            &trans  &none  &trans    &trans  &none               &trans
            >;
        };

        nav_layer {
            bindings = <
       &none  &none         &none       &none          &none          &none      &none   &none         &none         &none       &none          &none
&none  &none  &kp HOME      &kp PG_UP   &kp PAGE_DOWN  &kp END        &none      &none   &kp HOME      &kp PG_DN     &kp PG_UP   &kp END        &none  &none
       &none  &kp LEFT      &kp UP      &kp DOWN       &kp RIGHT      &none      &none   &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &none
       &none  &kp LC(LEFT)  &kp LC(UP)  &kp LC(DOWN)   &kp LC(RIGHT)  &kp RET    &none   &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &none
                                        &trans         &none          &trans     &trans  &none         &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
            &none        &none         &none         &none         &none         &none                  &none         &none         &none         &none         &none         &none
&sys_reset  &bootloader  &none         &none         &none         &none         &tog_lang LS(GRAVE)    &none         &none         &none         &none         &none         &bootloader  &sys_reset
            &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4           &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
            &none        &none         &none         &none         &none         &none                  &none         &none         &none         &none         &none         &none
                                                     &trans        &out OUT_TOG  &trans                 &trans        &none         &trans
            >;
        };

        game_BAR {
            bindings = <
       &kp GRAVE  &trans   &trans  &trans          &trans  &trans               &trans  &trans  &trans  &trans  &trans  &trans
&sl 9  &trans     &trans   &trans  &trans          &trans  &trans               &trans  &trans  &trans  &trans  &trans  &trans  &trans
       &trans     &lt 8 A  &trans  &trans          &trans  &trans               &trans  &trans  &trans  &trans  &trans  &trans
       &trans     &trans   &trans  &trans          &trans  &GAME_BAR_REVERSE    &trans  &trans  &trans  &trans  &trans  &trans
                                   &kp LEFT_SHIFT  &trans  &kp LS(LEFT_ALT)     &trans  &trans  &trans
            >;
        };

        game_num {
            bindings = <
        &trans  &trans  &trans  &trans      &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp N7  &kp N8      &kp N9  &trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &kp N4  &kp N5      &kp N6  &kp N0          &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &kp N1  &kp N2      &kp N3  &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                &kp LSHIFT  &trans  &kp LEFT_ALT    &trans  &trans  &trans
            >;
        };

        reverse {
            bindings = <
        &trans  &kp F10    &kp F9   &kp F8          &kp F7     &kp F6          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp P      &kp O    &kp I           &kp U      &kp Y           &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp SEMI   &kp L    &kp K           &kp J      &kp H           &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp GRAVE  &kp DOT  &kp COMMA       &kp M      &kp N           &trans  &trans  &trans  &trans  &trans  &trans
                                    &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT    &trans  &trans  &trans
            >;
        };
    };
};
